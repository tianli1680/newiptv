name: Process M3U Playlist

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # 每天自动运行一次

jobs:
  process-playlist:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # 添加仓库写入权限
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Process M3U playlist
      run: |
        python << 'EOF'
        import re
        import urllib.request
        import urllib.parse
        
        # m3u文件URL
        m3u_url = "https://live.ottiptv.cc/iptv.m3u?userid=8137863657&sign=2c8d82c9f17f480726d4770be9d0fb33fd0fcb31e1024448c36663605ea6a3f99e5bd467b68c287e3f0c07f85b95a188139aa3f19e227e251dc707bce0ededaab73ceeaddf6195&auth_token=54741b289e946919fc1c34ca88db58a4"
        
        print("开始下载m3u文件...")
        try:
            # 下载m3u文件
            req = urllib.request.Request(m3u_url)
            req.add_header('User-Agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36')
            with urllib.request.urlopen(req) as response:
                content = response.read().decode('utf-8')
            print("m3u文件下载成功")
        except Exception as e:
            print(f"下载m3u文件失败: {e}")
            exit(1)
        
        # 解析m3u文件
        lines = content.split('\n')
        channels = []
        current_channel = {}
        
        print("开始解析m3u文件...")
        for line in lines:
            line = line.strip()
            if line.startswith('#EXTINF:'):
                # 解析频道信息
                current_channel = {'header': line}
                # 提取group-title
                group_match = re.search(r'group-title="([^"]*)"', line)
                if group_match:
                    current_channel['group'] = group_match.group(1)
                else:
                    current_channel['group'] = ''
                # 提取频道名称
                name_match = re.search(r',([^,]*)$', line)
                if name_match:
                    current_channel['name'] = name_match.group(1)
                else:
                    current_channel['name'] = ''
            elif line and not line.startswith('#') and current_channel:
                current_channel['url'] = line
                channels.append(current_channel.copy())
                current_channel = {}
        
        print(f"共解析到 {len(channels)} 个频道")
        
        # 分类处理
        live1_channels = []  # 咪咕央视
        live2_channels = []  # 央视频道 (MCP)
        live3_channels = []  # 咪咕卫视
        live4_channels = []  # 卫视频道 (MCP)
        live5_channels = []  # 其他、影视
        live6_channels = []  # 体育
        
        # 央视频道名称映射
        cctv_name_mapping = {
            'CCTV1综合': 'CCTV-1 综合',
            'CCTV2财经': 'CCTV-2 财经',
            'CCTV3综艺': 'CCTV-3 综艺',
            'CCTV4中文国际': 'CCTV-4 中文国际',
            'CCTV5体育': 'CCTV-5 体育',
            'CCTV5+体育赛事': 'CCTV-5+ 体育赛事',
            'CCTV6电影': 'CCTV-6 电影',
            'CCTV7国防军事': 'CCTV-7 国防军事',
            'CCTV8电视剧': 'CCTV-8 电视剧',
            'CCTV9纪录': 'CCTV-9 纪录',
            'CCTV10科教': 'CCTV-10 科教',
            'CCTV11戏曲': 'CCTV-11 戏曲',
            'CCTV12社会与法': 'CCTV-12 社会与法',
            'CCTV13新闻': 'CCTV-13 新闻',
            'CCTV14少儿': 'CCTV-14 少儿',
            'CCTV15音乐': 'CCTV-15 音乐',
            'CCTV17农业农村': 'CCTV-17 农业农村',
            'CCTV4欧洲': 'CCTV-4 欧洲',
            'CCTV4美洲': 'CCTV-4 美洲',
            'CGTN外语纪录': 'CGTN 外语纪录',
            'CGTN阿拉伯语': 'CGTN 阿拉伯语'
        }
        
        def update_channel_name(header, old_name, new_name):
            """更新频道名称的辅助函数"""
            # 使用正则表达式精确替换频道名称
            pattern = r'(,)' + re.escape(old_name) + r'$'
            new_header = re.sub(pattern, r'\1' + new_name, header)
            return new_header
        
        def update_group_title(header, old_group, new_group):
            """更新分组名称的辅助函数"""
            # 使用正则表达式精确替换分组名称
            pattern = r'group-title="' + re.escape(old_group) + r'"'
            new_header = re.sub(pattern, f'group-title="{new_group}"', header)
            return new_header
        
        print("开始分类处理频道...")
        for channel in channels:
            group = channel.get('group', '')
            name = channel.get('name', '')
            original_header = channel['header']
            
            # 1. 央视频道处理 - 分组为央视且名称包含CCTV
            if group == '央视':
                if 'MCP' in name:
                    # 央视频道 (MCP) - 分组为央视且名称包含MCP
                    new_header = update_group_title(original_header, group, '央视频道')
                    channel['header'] = new_header
                    live2_channels.append(channel)
                elif 'CCTV' in name or 'CGTN' in name:
                    # 咪咕央视 - 分组为央视且名称包含CCTV或CGTN
                    new_header = original_header
                    
                    # 应用名称映射
                    name_updated = False
                    for old_name, new_name in cctv_name_mapping.items():
                        if old_name == name:  # 精确匹配
                            new_header = update_channel_name(new_header, name, new_name)
                            channel['name'] = new_name
                            name_updated = True
                            break
                        elif old_name in name:  # 部分匹配
                            new_header = update_channel_name(new_header, name, new_name)
                            channel['name'] = new_name
                            name_updated = True
                            break
                    
                    # 更新分组名称
                    new_header = update_group_title(new_header, group, '咪咕央视')
                    channel['header'] = new_header
                    live1_channels.append(channel)
            
            # 2. 卫视频道处理
            elif group == '卫视':
                if 'MCP' in name:
                    # 卫视频道 (MCP) - 分组为卫视且名称包含MCP
                    new_header = update_group_title(original_header, group, '卫视频道')
                    channel['header'] = new_header
                    live4_channels.append(channel)
                else:
                    # 咪咕卫视 - 分组为卫视且不包含MCP
                    new_header = update_group_title(original_header, group, '咪咕卫视')
                    channel['header'] = new_header
                    live3_channels.append(channel)
            
            # 3. 其他、影视频道
            elif group in ['其他', '影视']:
                live5_channels.append(channel)
            
            # 4. 体育频道
            elif group == '体育':
                live6_channels.append(channel)
        
        # 调试输出：显示名称映射情况
        print("央视频道名称映射调试信息:")
        cctv_mapped = []
        for channel in live1_channels:
            for old_name, new_name in cctv_name_mapping.items():
                if new_name == channel['name']:
                    cctv_mapped.append(f"  {old_name} -> {new_name}")
                    break
        if cctv_mapped:
            for item in cctv_mapped[:10]:  # 只显示前10个映射
                print(item)
            if len(cctv_mapped) > 10:
                print(f"  ... 还有 {len(cctv_mapped) - 10} 个映射")
        else:
            print("  没有找到可映射的央视频道")
        
        # 写入各分类文件
        def write_m3u_file(filename, channel_list):
            with open(filename, 'w', encoding='utf-8') as f:
                f.write('#EXTM3U\n')
                for channel in channel_list:
                    f.write(channel['header'] + '\n')
                    f.write(channel['url'] + '\n')
        
        print("开始写入分类文件...")
        write_m3u_file('live1.m3u', live1_channels)
        write_m3u_file('live2.m3u', live2_channels)
        write_m3u_file('live3.m3u', live3_channels)
        write_m3u_file('live4.m3u', live4_channels)
        write_m3u_file('live5.m3u', live5_channels)
        write_m3u_file('live6.m3u', live6_channels)
        
        # 合并文件（按指定顺序）
        with open('live.m3u', 'w', encoding='utf-8') as f:
            f.write('#EXTM3U\n')
            # 按指定顺序合并：live2, live4, live1, live3, live5, live6
            for filename in ['live2.m3u', 'live4.m3u', 'live1.m3u', 'live3.m3u', 'live5.m3u', 'live6.m3u']:
                try:
                    with open(filename, 'r', encoding='utf-8') as src:
                        content = src.read()
                        # 跳过每个文件的EXTM3U头
                        lines = content.split('\n')[1:]
                        # 过滤空行
                        non_empty_lines = [line for line in lines if line.strip()]
                        if non_empty_lines:
                            f.write('\n'.join(non_empty_lines) + '\n')
                except Exception as e:
                    print(f"读取文件 {filename} 时出错: {e}")
        
        # 输出统计信息
        print("M3U文件处理完成！")
        print(f"分类统计:")
        print(f"  咪咕央视 (live1.m3u): {len(live1_channels)} 个频道")
        print(f"  央视频道 (live2.m3u): {len(live2_channels)} 个频道")
        print(f"  咪咕卫视 (live3.m3u): {len(live3_channels)} 个频道")
        print(f"  卫视频道 (live4.m3u): {len(live4_channels)} 个频道")
        print(f"  其他影视 (live5.m3u): {len(live5_channels)} 个频道")
        print(f"  体育频道 (live6.m3u): {len(live6_channels)} 个频道")
        print(f"  合并文件 (live.m3u): {len(live1_channels) + len(live2_channels) + len(live3_channels) + len(live4_channels) + len(live5_channels) + len(live6_channels)} 个频道")
        EOF
    
    - name: Commit processed files
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add live*.m3u
        git diff --staged --quiet || git commit -m "自动更新分类后的播放列表 [skip ci]"
        git push
